data = read.csv('Vaxigen.csv')
data
data$Uniprot.Id
data$Threshold..0.4
data$Plain
data = read.csv('vaxijensequence.csv')
write.csv(data,'mydata.csv')
d = read.csv('mydata.csv')
names(data)
names(d)
d = data.frame(data)
write.csv(d,'mydata.csv')
length(d$Entry)
l = 1:1139
length(l)
d = data.frame(d,l)
write.csv(d,'mydata.csv')
typeof(data$Sequencce)
typeof(data$Sequence)
data$Sequence[1]
typeof(data$Sequence[1])
data$Sequence[1].toString
toString(data$Sequence[1])
gregexpr("A", toString(data$Sequence[1]))
sum(gregexpr("A", toString(data$Sequence[1])))
gregexpr("A", toString(data$Sequence[1])).match.length
length(gregexpr("A", toString(data$Sequence[1])))
unlist(gregexpr("A", toString(data$Sequence[1])))
length(unlist(gregexpr("A", toString(data$Sequence[1]))))
for i in 1:length(data){print(i)}
for(i in 1:length(data)){print(i)}
for(i in 1:length(data[[,1]])){print(i)}
for(i in 1:length(data[[1,]])){print(i)}
for(i in 1:length(data[1,)){print(i)}
for(i in 1:length(data[1,])){print(i)}
for(i in 1:length(data[,1])){print(i)}
data[,2]
data[,3]
data[,4]
data[1,4]
data[,5]
sequence = data[,5]
lapply(sequence,function(s) (length(gregexpr(pattern = "A", toString(s))[[1]])))
unlist(lapply(sequence,function(s) (length(gregexpr(pattern = "A", toString(s))[[1]]))))
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],"A")
aminoacid = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "Y", "Z")
aminoacid
a = c(1:4)
b = c(1:4)
d = data.frame(a,b)
d
colnames(d) = NULL
d
colnames(d) = c("T","B")
d
a = c("A","B","C")
combn(a,2)
install.packages('gtools')
library(gtools)
permutations(a,2)
permutations(n = 3, r = 2, v = a)
list(permutations(n = 3, r = 2, v = a))
unlist(permutations(n = 3, r = 2, v = a))
unlist(permutations(n = 3, r = 2, v = a))[1]
unlist(permutations(n = 3, r = 2, v = a))[1,1]
unlist(permutations(n = 3, r = 2, v = a))[,1]
unlist(permutations(n = 3, r = 2, v = a))[1,1]
unlist(permutations(n = 3, r = 2, v = a))[1,]
unlist(permutations(n = 3, r = 2, v = a))[2,]
a
feature = list()
source('~/BioInformatics/Vaxijen/Predjen/findpattern.R')
permutations(n = 3, r = 1, v=d)
permutations(n = 3, r = 1, v=a)
permutations(n = 3, r = 2, v=a)
permutations(n = 3, r = 3, v=a)
permutations(n = 3, r = 3, v=a, repeats.allowed = TRUE)
permutations(n = 26, r = 1, v=aminoacid, repeats.allowed = TRUE)
aminoacid
length(aminoacid)
permutations(n = 25, r = 1, v=aminoacid, repeats.allowed = TRUE)
permutations(n = 25, r = 2, v=aminoacid, repeats.allowed = TRUE)
f = permutations(n = 25, r = 2, v=aminoacid, repeats.allowed = TRUE)
f
length(f)
length(f[1,])
length(f[1,1])
length(f[,1])
for(i in length(f[,1])){print(i)}
for(i in f[,1]){print(i)}
d
d = data.frame(d,c(1:4))
d
d[3]
colnames(d[3]) = "C"
d
colnames(d[3]) = ULL
colnames(d[3]) = NULL
d
d[3]
names(d[3])
names(d[3]) = "C"
d
names(d[3]) <- "C"
d
names(d[3]) <- NULL
d
`colnames<-`(d[3])
`colnames<-(d[3])
;
''
'
""
.
;
'
exit()
;
111
123
`
colnames(d[3]) = "C"
d
colnames(d)
colnames(d[3])
colnames(d[3]) = NULL
d
colnames(d[3]) <- "A"
d
colnames(d[3]) <- c("A")
d
names(d)
names(d[3])
names(d[3]) = "C"
d
colnames(d[2]) = 'A
d'
d
colnames(d) = c("A","B", "C")
d
colnames(d)
colnames(d)[3]
colnames(d)[3] = "D"
d
d = data.frame(d,c(1:4))
d
colnames(d)[length(d)] = "C"
d
a = data.frame()
a
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seq.order = 1)
source('~/BioInformatics/Vaxijen/Predjen/findpattern.R')
featurization(data[,5],aminoacid, seq.order = 1)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seq.order = 1)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seq.order = 1)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seq.order = 1)
unlist(lapply(sequence,function(s)
(length(
gregexpr(pattern = pattern, toString(s))[[1]]
))))
sequence = "ABCDE"
pattern = "A"
unlist(lapply(sequence,function(s)
(length(
gregexpr(pattern = pattern, toString(s))[[1]]
))))
pattern = "F"
unlist(lapply(sequence,function(s)
(length(
gregexpr(pattern = pattern, toString(s))[[1]]
))))
gregexpr(pattern = pattern, toString(s))[[1]]
gregexpr(pattern = pattern, toString(sequence))[[1]]
pattern = "A"
gregexpr(pattern = pattern, toString(sequence))[[1]]
sequence = "ABCBDBDBDBAAABBBCCDDEBEE"
gregexpr(pattern = pattern, toString(sequence))[[1]]
-1 %in% gregexpr(pattern = pattern, toString(sequence))[[1]]
if(-1 %in% gregexpr(pattern = pattern, toString(s))[[1]]){0}else{length(
gregexpr(pattern = pattern, toString(s))[[1]])}
if(-1 %in% gregexpr(pattern = pattern, toString(s))[[1]]){0}else{length(
gregexpr(pattern = pattern, toString(sequence))[[1]])}
if(-1 %in% gregexpr(pattern = pattern, toString(sequence))[[1]]){0}else{length(
gregexpr(pattern = pattern, toString(sequence))[[1]])}
sequence
pattern
pattern = "G"
if(-1 %in% gregexpr(pattern = pattern, toString(sequence))[[1]]){0}else{length(
gregexpr(pattern = pattern, toString(sequence))[[1]])}
featurization(data[,5],aminoacid, seq.order = 1)
source('~/BioInformatics/Vaxijen/Predjen/findpattern.R')
featurization(data[,5],aminoacid, seq.order = 1)
featurization(data[,5],aminoacid, seq.order = 2)
p = c("A", "B")
p
toString(p)
p
as.character(p)
paste(p, collapse = '')
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seq.order = 2)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seq.order = 2)
featurization(data[,5],aminoacid, seqorder = 2)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seqorder = 2)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seqorder = 2)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid, seqorder = 2)
l = 34123421342134213424242342342342423424
l
u = 24342342342342342342342342342342342342
u
l+u
paste('A',"b")
paste0('A',"b")
paste('A',"b", collapse = '')
a = c("a", "b","c", "d")
a
paste(a)
paste(a,collapse = '')
paste(a,"_",collapse = '')
paste0(a,"_",collapse = '')
paste0(a,"_")
paste0("a","b")
paste0(a,"a","b")
cat(a,"_")
l = cat(a,"_")
l
paste0(paste0(a),"_")
a
paste(paste(a,collapse = ''),"_")
paste0(paste(a,collapse = ''),"_")
paste0(paste(a,collapse = ''),"_",8)
gregexpr(pattern = pattern, sequence)
pattern = "A"
gregexpr(pattern = pattern, sequence)
sequence
pattern = "AB"
gregexpr(pattern = pattern, sequence)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid,seq = FALSE)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid,seq = FALSE)
source('~/BioInformatics/Vaxijen/Predjen/findposition.R')
featurization(data[,5],aminoacid,seq = FALSE)
featurization(data[,5],aminoacid,seq = FALSE, posorder = 1)
max(data$Sequence)
as.numeric(data$Sequence)
max(as.numeric(data$Sequence))
min(as.numeric(data$Sequence))
data$Length
max(data$Length)
min(data$Length)
min(as.numeric(data$Sequence))
as.numeric(data$Squence)
as.numeric(data$Sequence)
lapply(sequence, function(s) {length(toString(s))})
ss = c("AAD", "aasdfasdf")
lapply(ss, function(s) {length(toString(s))})
length("asdf")
nchar("asdf")
lapply(ss, function(s) {nchar(toString(s))})
ss
unlist(lapply(ss, function(s) {nchar(toString(s))}))
min(unlist(lapply(ss, function(s) {nchar(toString(s))})))
min(unlist(lapply(data[,5], function(s) {nchar(toString(s))})))
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid,seq = FALSE, posorder = 1)
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
featurization(data[,5],aminoacid,seq = FALSE, posorder = 2)
source('~/BioInformatics/Vaxijen/Predjen/findpattern.R')
source('~/BioInformatics/Vaxijen/Predjen/findposition.R')
source('~/BioInformatics/Vaxijen/Predjen/featurization.R')
source('~/BioInformatics/Vaxijen/Predjen/datamanipulation.R')
data = read.csv('sequencefeaturized.csv')
aminoacid = c(
"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "Y", "Z"
)
data = data.frame(data)
source('~/BioInformatics/Vaxijen/Predjen/datamanipulation.R')
